set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_VERSION 1)
set(CMAKE_SYSTEM_PROCESSOR arm)

set(cross_triple $ENV{CROSS_TRIPLE})
set(cross_root $ENV{CROSS_ROOT})

set(TARGET_TRIPLET ${cross_triple})

# set(CMAKE_C_COMPILER $ENV{CC})
# set(CMAKE_CXX_COMPILER $ENV{CXX})
# set(CMAKE_Fortran_COMPILER $ENV{FC})

set(CMAKE_CXX_FLAGS "-I ${cross_root}/include/")

set(CMAKE_FIND_ROOT_PATH ${cross_root} ${cross_root}/${cross_triple})
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
# set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)
# set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE BOTH)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)  #DEFAULT ON OLD CONFIG file
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY) #DEFAULT ON OLD CONFIG file

set(CMAKE_EXECUTABLE_SUFFIX ".elf")

# Without that flag CMake is not able to pass test compilation check
if(${CMAKE_VERSION} VERSION_EQUAL "3.6.0" OR ${CMAKE_VERSION} VERSION_GREATER "3.6")
  set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
else()
  set(CMAKE_EXE_LINKER_FLAGS_INIT "--specs=nosys.specs ")
endif()

find_program(CMAKE_C_COMPILER ${TARGET_TRIPLET}-gcc PATH ${TOOLCHAIN_PATH})
find_program(CMAKE_ASM_COMPILER ${TARGET_TRIPLET}-gcc PATH ${TOOLCHAIN_PATH})
find_program(CMAKE_CXX_COMPILER ${TARGET_TRIPLET}-g++ PATH ${TOOLCHAIN_PATH})
find_program(CMAKE_OBJCOPY ${TARGET_TRIPLET}-objcopy PATH ${TOOLCHAIN_PATH})
find_program(CMAKE_SIZE_UTIL ${TARGET_TRIPLET}-size PATH ${TOOLCHAIN_PATH})
find_program(CMAKE_OBJDUMP ${TARGET_TRIPLET}-objdump PATH ${TOOLCHAIN_PATH})
find_program(CMAKE_RANLIB ${TARGET_TRIPLET}-ranlib PATH ${TOOLCHAIN_PATH})
find_program(CMAKE_READELF ${TARGET_TRIPLET}-readelf PATH ${TOOLCHAIN_PATH})
find_program(CMAKE_NM ${TARGET_TRIPLET}-nm PATH ${TOOLCHAIN_PATH})
find_program(CMAKE_LINKER ${TARGET_TRIPLET}-ld PATH ${TOOLCHAIN_PATH})
find_program(CMAKE_GDB ${TARGET_TRIPLET}-gdb PATH ${TOOLCHAIN_PATH})
